// Imports
import int;
import double;
import string;
import bool;
import char;
import vec2;
import array;

import functions log;

int a;
//int b = 5;
//int c = 9 + 10 * 6;
a = int(double(3.2)*6.2 * 5.0);
a.print(); // 99
//b.print();
//c.print();

function void testExpressionParser()
{
	int(7).print();
	(-(6 * 7)).print();
	(int(6) * 7).print();
	("Hello" + " world!").print();
	(("Hello" + ' ' + "world" + '!').len() * 2).print();
	string("_1\"3_").print();
	vec2(0, 9).-toString().print();
	string("Hello World").-len().print();
	("Hello World"-3).print();
	("#-" * 10 + '#').print();
	vec2(8 + stuff(3, int(6)) * 4, 2).toString().print(); // [92.0, 2.0]
	(vec2(6.9, 4.2) * 7.5).print(); //vec2[x=51.75,y=31.5]
}

testExpressionParser();


// This somehow works...
function void output(string text)
{
	text.print();
}

output("Hi World!");

function int stuff(int varA, int varB)
{
	function void prnt()
	{
		"inside function thingie".print();
	}
	int temp = varA * varB;
	temp.print();
	prnt();
	a.print();
	return temp + varA;
}

int i = stuff(2, 3); // inside function thingie
i.print(); // 8

"before adr".print(); // before adr

string adr = vec2(8 + stuff(3, 6) * 3, 2).toString();
adr.print();


class vec3
{
	public double x;
	public double y;
	public double z;

	constructor()
	{
		this.x = 0.0;
		this.y = 0.0;
		this.z = 0.0;
	}

	constructor(double X, double Y, double Z)
	{
		this.x = X;
		this.y = Y;
		this.z = Z;
	}

	function int print(int t)
	{
		t.print();
		x.print();
		("vec3[x=" + string(x) + ",y=" + string(y) + ",z=" + string(z) + "]").printRaw();
		return 0;
	}

	function void print()
	{
		("vec3[x=" + string(x) + ",y=" + string(y) + ",z=" + string(z) + "]").printRaw();
	}

	operator+ (vec3 other)
	{
		this.x = x + other.getX();
		this.y = y + other.getY();
		this.z = z + other.getZ();
		return this;
	}

	operator* (double mul)
	{
		this.x = x * mul;
		this.y = y * mul;
		this.z = z * mul;
		return this;
	}
}

class TestClass
{
	double x;

	constructor(double X)
	{
		this.x = X;
	}

	constructor()
	{
		this.x = 0.0;
	}
}

string helloStringTest = "Hello World!";
helloStringTest._printAllValues();
helloStringTest.printRaw();
" ".printRaw();

int intTest = 5;
intTest._printAllValues();
" ".printRaw();

double doubleTest = 5.2;
doubleTest._printAllValues();
" ".printRaw();

array arr = array();
arr.push(doubleTest);
arr.push(6.9);
arr.push(doubleTest);
arr._printAllValues();
arr.get(1).print();
" ".printRaw();

vec2 vec2Test = vec2(3.0, 6.0);
vec2Test._printAllValues();
vec2Test.print();
" ".printRaw();

vec3 test = vec3();
test._printAllValues();
" ".printRaw();

test = vec3(1.2, 3.4, 5.6);
test._printAllValues();
logBrightMagenta();
" ".printRaw();
test.print(177013);
test.getX().print();
test.setY(6.3);
test.print();
vec3 t = test + vec3(6.5, 4.3, 2.1);
t.print();
t = t * 3.0;
t.print();
" ".printRaw();
logReset();

logBrightYellow();
" ".printRaw();
vec3 ad = vec3(6.5, 4.3, 2.1) + test;
ad._printAllValues();
" ".printRaw();
logReset();

TestClass testClass = TestClass(6.9);
testClass._printAllValues();
" ".printRaw();

testClass = TestClass();
testClass._printAllValues();
" ".printRaw();



bool boolTest = 5.0 >= 5.0;
boolTest.print();
" ".printRaw();